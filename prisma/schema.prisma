// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client-generated"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "./ERD.png"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// RELATIONSHIPS OVERVIEW:
// - User has many UserScores (one user can score in multiple matches)
// - Team can be homeTeam or awayTeam in multiple matches
// - Match has one homeTeam, one awayTeam, and many UserScores
// - UserScore connects one User to one Match with their score

model User {
  id         String       @id @default(cuid())
  name       String       @unique
  displayName String
  // One-to-many: A user can have scores in multiple matches
  userScores UserScore[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Team {
  id         String   @id @default(cuid())
  name       String   @unique
  // One-to-many: A team can be the home team in multiple matches
  homeMatches Match[]  @relation("HomeTeam")
  // One-to-many: A team can be the away team in multiple matches
  awayMatches Match[]  @relation("AwayTeam")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Match {
  id           String      @id @default(cuid())
  matchNumber  String      @unique
  date         DateTime
  homeTeamId   String
  awayTeamId   String
  winningTeamId String?    // Which team won (null if draw)
  // Many-to-one: Each match has exactly one home team
  homeTeam     Team        @relation("HomeTeam", fields: [homeTeamId], references: [id])
  // Many-to-one: Each match has exactly one away team
  awayTeam     Team        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  // One-to-many: A match can have multiple user scores (one per user)
  userScores   UserScore[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model UserScore {
  id        String      @id @default(cuid())
  userId    String
  matchId   String
  score     Int
  // Many-to-one: Each score entry belongs to exactly one user
  user      User     @relation(fields: [userId], references: [id])
  // Many-to-one: Each score entry belongs to exactly one match
  match     Match    @relation(fields: [matchId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Composite unique constraint: A user can only have one score per match
  @@unique([userId, matchId])
}
